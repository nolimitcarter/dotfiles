#   _               _
#  | |__   __ _ ___| |__  _ __ ___     
#  | '_ \ / _` / __| '_ \| '__/ __|    
#  | |_) | (_| \__ \ | | | | | (__     nolimitcarter 
#  |_.__/ \__,_|___/_| |_|_|  \___|    https://github.com/nolimitcarter
#

[ -z "$OS" ] && OS='uname'
case "$OS" in
  *indows* )        PLATFORM=windows ;;
  Linux )           PLATFORM=linux ;;
  FreeBSD|Darwin )  PLATFORM=mac ;;
esac
export PLATFORM OS

## sets path variables
export PATH=\
$HOME/bin:\
$HOME/go/bin:\
$HOME/.cargo/bin:\
/usr/local/go/bin:\
/usr/local/bin:\
/usr/local/sbin:\
/usr/sbin:\
/usr/bin:\
/snap/bin:\
/sbin:\
/bin:\

# be sure not to remove ./ or stuff gets weird
export CDPATH=\
./:\
$REPOS/gitlab.com/$GITUSER:\
$REPOS/github.com/$GITUSER:\
$REPOS/gitlab.com/*:\
$REPOS/github.com/*:\
$REPOS/gitlab.com:\
$REPOS/github.com:\
$REPOS:\
/media/$USER:\
$HOME

# some wack sh#t for Manjaro to work
export VIMRUNTIME="/usr/share/vim/vim90"

# editor 
export EDITOR=vim
export EDItoR="$VISUAL"

set -o vi 
set bell-style none

# aliases 
if [ -f $HOME/.bash_aliases ];
then
	. $HOME/.bash_aliases
fi

# user prompt 
#if [[ ${EUID} == 0 ]] ; then
#	  PS1='\[\033[01;31m\][\h\[\033[01;36m\]\ W\[\033[01;31m\]]\$\[\033[00m\]'
#  else
#	  PS1='\n\033[1;33m\]♛ \[\033[1;35m\]\[boost\[\033[1;33m\]\n\033[94m\]\W\[\033[0;94m\] ⟹  \[\033[0m\]'
#fi

PROMPT_LONG=20
PROMPT_MAX=95
PROMPT_AT=

__ps1() {
	local P='⟹ ' dir="${PWD##*/}" B countme short long double \
		r='\[\e[31m\]' g='\[\e[30m\]' h='\[\e[34m\]' \
		u='\[\e[33m\]' p='\[\e[34m\]' w='\[\e[35m\]' \
		b='\[\e[36m\]' x='\[\e[0m\]'  
    
    j='boost' # user

	[[ $EUID == 0 ]] && P='#' && u=$r && p=$u # root
	[[ $PWD = / ]] && dir=/
	[[ $PWD = "$HOME" ]] && dir='~ '

	B=$(git branch --show-current 2>/dev/null)
	[[ $dir = "$B" ]] && B=.
	countme="$USER$PROMPT_AT$(hostname):$dir($B)\$ "

	[[ $B == master || $B == main ]] && b="$r"
	[[ -n "$B" ]] && B=" $g$b$B$g"

	short="\n$u♛ $w$j$g$PROMPT_AT$h\n$g:$p$dir$B$p$P$x "
	long="\n$u♛ $w$j$g$PROMPT_AT$h\n$p$dir$B $p$P$x "
  double="\n$u♛ $w$j$g$PROMPT_AT$h\n$p$dir$B $p$P$x "

	if ((${#countme} > PROMPT_MAX)); then
		PS1="$double"
	elif ((${#countme} > PROMPT_LONG)); then
		PS1="$long"
	else
		PS1="$short"
	fi
}

PROMPT_COMMAND="__ps1"


# dircolors
# for nord dir colors
#test -r "~/.dir_colors" && eval $(dircolors ~/.dir_colors)

# if [ -x /usr/bin/dircolors ]; then 
#	if [ -r ~/.dircolors ]; then
#		eval "$(dircolors -b ~/.dircolors)"
#	else
#		eval "$(dircolors -b)" 
#	fi
#fi

if [ "$TERM" != "dumb" ]; then
	eval "`dircolors -b`"
	alias ls='ls --color=auto'
	alias dir='ls --color=auto --format=vertical'
	alias vdir='ls --color=auto --format=long'
fi

# grep autocomplete/helper made with go 
# haven't used in a while - autocomplete not really needed
# source ~/repos/github.com/nolimitcarter/cloned/gf/gf-completion.bash

# bash tab completion because why not??
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"


############################
######## functions #########
############################

# netinfo - shows system network info
netinfo ()
{
	echo "--------------- Network Information ---------------"
	/sbin/ifconfig | awk /'inet addr/ {print $2}'
	/sbin/ifconfig | awk /'Bcast/ {print $3}'
	/sbin/ifconfig | awk /'inet addr/ {print $4}'
	/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
	myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
	echo "${myip}"
	echo "---------------------------------------------------"
}

# simple clock function 
myclock () 
{ 
	while true;do clear;echo "===========";date +"%r";echo "===========";sleep 1;done 
}


# define a word using define dog and lynx
define () 
{ 
	lynx --dump "http://www.google.com/search?hl=en&q=define%3A+${1}&btnG=Google+Search" | grep -m 3 -w "*"  | sed 's/;/ -/g' | cut -d- -f1 > /tmp/templookup.txt
	if [[ -s /tmp/templookup.txt ]] ;then
		until ! read response
			do 
			echo "${response}"
			done < /tmp/templooup.txt
		else 
			echo "Sorry $USER, I can't find the term \"${1} \""
	fi 
\rm -f /tmp/templookup.txt
}


# lowercase all files in the current directory 
lcfiles () 
{ 
        print -n 'Really lowercase all files? (y/n) '
        if read -q ; then 
                for i in * ; do 
                        mv $i $i:l
        done 
        fi
}

# copy and go to dir
cpg () 
{ 
        if [ -d "$2" ];then 
                cp $1 $2 && cd $2
        else
                cp $1 $2 
        fi 
} 

# move and go to dir
mvg ()
{ 
        if [ -d "$2" ];then 
                mv $1 $2 && cd $2
        else 
                mv $1 $2
        fi
} 

# show tilde
tilde () 
{ 
        echo "~"
}

# translate a word
translate () 
{ 
TRANSLATED=`lynx -dump "http://dictionary.reference.com/browse/${1}" | grep -i -m 1 -w "${2}:" | sed 's/^[ \t]*//;s/[ \t]*$//'`
if [[ ${#TRANSLATED} != 0 ]] ;then
        echo "\"${1}\" in ${TRANSLATED}"
        else 
                echo "Sorry, no translation. \"${1}\" to ${2}"
fi
} 

# extracter 
extract () 
{ 
if [ -f $1 ] ;then 
  case $1 in 
    *.tar.bz2)   tar xjf $1        ;;
    *.tar.gz)    tar xzf $1     ;;
    *.bz2)       bunzip2 $1       ;;
    *.rar)       rar x $1     ;;
    *.gz)        gunzip $1     ;;
    *.tar)       tar xf $1        ;;
    *.tbz2)      tar xjf $1      ;;
    *.tgz)       tar xzf $1       ;;
    *.zip)       unzip $1     ;;
    *.Z)         uncompress $1  ;;
    *.7z)        7z x $1    ;;
    *)           echo "'$1' cannot be extracted via extract()" ;;
  esac
    else
      echo "'$1' is not a valid file"
 fi
}

automate ()
{
  git add -A 
  git commit -m "$*"
#  git commit -a -m "$1" 
  git push
}



# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/carter/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/carter/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/carter/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/carter/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


LS_COLORS="fi=1;92:di=1;34;1:ex=4;35:*.mp3=1;33;41"

# PATH="/home/cthome/perl5/bin${PATH:+:${PATH}}"; export PATH;
# PERL5LIB="/home/cthome/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
# PERL_LOCAL_LIB_ROOT="/home/cthome/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
# PERL_MB_OPT="--install_base \"/home/cthome/perl5\""; export PERL_MB_OPT;
# PERL_MM_OPT="INSTALL_BASE=/home/cthome/perl5"; export PERL_MM_OPT;
